/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/documentation/charts/apexcharts.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/core/js/custom/documentation/charts/apexcharts.js ***!
  \****************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTGeneralApexCharts = function () {\n  // Shared variables\n  // Private functions\n  var example1 = function example1() {\n    var element = document.getElementById(\"kt_apexcharts_1\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-gray-300');\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58, 43, 56, 65, 41, 55, 66]\n      }, {\n        name: 'Cost',\n        data: [32, 34, 52, 46, 27, 60, 41, 49, 13, 11, 44, 33]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105, 87, 99, 75, 82, 91, 89]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['40%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, dangerColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var example2 = function example2() {\n    var element = document.getElementById(\"kt_apexcharts_2\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-warning');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-gray-300');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: true,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var example3 = function example3() {\n    var element = document.getElementById(\"kt_apexcharts_3\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-info');\n    var lightColor = KTUtil.getCssVariableValue('--bs-light-info');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 40, 40, 90, 90, 70, 70]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [baseColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: baseColor,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [lightColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        strokeColor: baseColor,\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var example4 = function example4() {\n    var element = document.getElementById(\"kt_apexcharts_4\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-success');\n    var baseLightColor = KTUtil.getCssVariableValue('--bs-light-success');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-warning');\n    var secondaryLightColor = KTUtil.getCssVariableValue('--bs-light-warning');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [60, 50, 80, 40, 100, 60]\n      }, {\n        name: 'Revenue',\n        data: [70, 60, 110, 40, 50, 70]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: labelColor,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [baseLightColor, secondaryLightColor],\n        strokeColor: [baseLightColor, secondaryLightColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var example5 = function example5() {\n    var element = document.getElementById(\"kt_apexcharts_5\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\n    var baseLightColor = KTUtil.getCssVariableValue('--bs-light-primary');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-info');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        type: 'bar',\n        stacked: true,\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        type: 'bar',\n        stacked: true,\n        data: [20, 20, 25, 30, 30, 20]\n      }, {\n        name: 'Expenses',\n        type: 'area',\n        data: [50, 80, 60, 90, 50, 70]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        stacked: true,\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          stacked: true,\n          horizontal: false,\n          endingShape: 'rounded',\n          columnWidth: ['12%']\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        max: 120,\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor, baseLightColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var example6 = function example6() {\n    var element = document.getElementById(\"kt_apexcharts_6\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\n    var baseLightColor = KTUtil.getCssVariableValue('--bs-success');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-info');\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Bob',\n        data: [{\n          x: 'Design',\n          y: [new Date('2019-03-05').getTime(), new Date('2019-03-08').getTime()]\n        }, {\n          x: 'Code',\n          y: [new Date('2019-03-02').getTime(), new Date('2019-03-05').getTime()]\n        }, {\n          x: 'Code',\n          y: [new Date('2019-03-05').getTime(), new Date('2019-03-07').getTime()]\n        }, {\n          x: 'Test',\n          y: [new Date('2019-03-03').getTime(), new Date('2019-03-09').getTime()]\n        }, {\n          x: 'Test',\n          y: [new Date('2019-03-08').getTime(), new Date('2019-03-11').getTime()]\n        }, {\n          x: 'Validation',\n          y: [new Date('2019-03-11').getTime(), new Date('2019-03-16').getTime()]\n        }, {\n          x: 'Design',\n          y: [new Date('2019-03-01').getTime(), new Date('2019-03-03').getTime()]\n        }]\n      }, {\n        name: 'Joe',\n        data: [{\n          x: 'Design',\n          y: [new Date('2019-03-02').getTime(), new Date('2019-03-05').getTime()]\n        }, {\n          x: 'Test',\n          y: [new Date('2019-03-06').getTime(), new Date('2019-03-16').getTime()]\n        }, {\n          x: 'Code',\n          y: [new Date('2019-03-03').getTime(), new Date('2019-03-07').getTime()]\n        }, {\n          x: 'Deployment',\n          y: [new Date('2019-03-20').getTime(), new Date('2019-03-22').getTime()]\n        }, {\n          x: 'Design',\n          y: [new Date('2019-03-10').getTime(), new Date('2019-03-16').getTime()]\n        }]\n      }, {\n        name: 'Dan',\n        data: [{\n          x: 'Code',\n          y: [new Date('2019-03-10').getTime(), new Date('2019-03-17').getTime()]\n        }, {\n          x: 'Validation',\n          y: [new Date('2019-03-05').getTime(), new Date('2019-03-09').getTime()]\n        }]\n      }],\n      chart: {\n        type: 'rangeBar',\n        fontFamily: 'inherit',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [baseColor, secondaryColor, baseLightColor],\n      plotOptions: {\n        bar: {\n          horizontal: true,\n          barHeight: '80%'\n        }\n      },\n      xaxis: {\n        type: 'datetime'\n      },\n      stroke: {\n        width: 1\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      legend: {\n        position: 'top',\n        horizontalAlign: 'left'\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      example1();\n      example2();\n      example3();\n      example4();\n      example5();\n      example6();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTGeneralApexCharts.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vY2hhcnRzL2FwZXhjaGFydHMuanM/MmNhZCJdLCJuYW1lcyI6WyJLVEdlbmVyYWxBcGV4Q2hhcnRzIiwiZXhhbXBsZTEiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImhlaWdodCIsInBhcnNlSW50IiwiS1RVdGlsIiwiY3NzIiwibGFiZWxDb2xvciIsImdldENzc1ZhcmlhYmxlVmFsdWUiLCJib3JkZXJDb2xvciIsImJhc2VDb2xvciIsInNlY29uZGFyeUNvbG9yIiwiZGFuZ2VyQ29sb3IiLCJvcHRpb25zIiwic2VyaWVzIiwibmFtZSIsImRhdGEiLCJjaGFydCIsImZvbnRGYW1pbHkiLCJ0eXBlIiwidG9vbGJhciIsInNob3ciLCJwbG90T3B0aW9ucyIsImJhciIsImhvcml6b250YWwiLCJjb2x1bW5XaWR0aCIsImVuZGluZ1NoYXBlIiwibGVnZW5kIiwiZGF0YUxhYmVscyIsImVuYWJsZWQiLCJzdHJva2UiLCJ3aWR0aCIsImNvbG9ycyIsInhheGlzIiwiY2F0ZWdvcmllcyIsImF4aXNCb3JkZXIiLCJheGlzVGlja3MiLCJsYWJlbHMiLCJzdHlsZSIsImZvbnRTaXplIiwieWF4aXMiLCJmaWxsIiwib3BhY2l0eSIsInN0YXRlcyIsIm5vcm1hbCIsImZpbHRlciIsInZhbHVlIiwiaG92ZXIiLCJhY3RpdmUiLCJhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbiIsInRvb2x0aXAiLCJ5IiwiZm9ybWF0dGVyIiwidmFsIiwiZ3JpZCIsInN0cm9rZURhc2hBcnJheSIsImxpbmVzIiwiQXBleENoYXJ0cyIsInJlbmRlciIsImV4YW1wbGUyIiwiZXhhbXBsZTMiLCJsaWdodENvbG9yIiwiY3VydmUiLCJjcm9zc2hhaXJzIiwicG9zaXRpb24iLCJjb2xvciIsImRhc2hBcnJheSIsInVuZGVmaW5lZCIsIm9mZnNldFkiLCJtYXJrZXJzIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VXaWR0aCIsImV4YW1wbGU0IiwiYmFzZUxpZ2h0Q29sb3IiLCJzZWNvbmRhcnlMaWdodENvbG9yIiwiZXhhbXBsZTUiLCJzdGFja2VkIiwibWF4IiwicGFkZGluZyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImV4YW1wbGU2IiwieCIsIkRhdGUiLCJnZXRUaW1lIiwiYmFySGVpZ2h0IiwiaG9yaXpvbnRhbEFsaWduIiwiaW5pdCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsbUJBQW1CLEdBQUcsWUFBWTtBQUNsQztBQUVBO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBWTtBQUN2QixRQUFJQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixpQkFBeEIsQ0FBZDtBQUVBLFFBQUlDLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxNQUFNLENBQUNDLEdBQVAsQ0FBV04sT0FBWCxFQUFvQixRQUFwQixDQUFELENBQXJCO0FBQ0EsUUFBSU8sVUFBVSxHQUFHRixNQUFNLENBQUNHLG1CQUFQLENBQTJCLGVBQTNCLENBQWpCO0FBQ0EsUUFBSUMsV0FBVyxHQUFHSixNQUFNLENBQUNHLG1CQUFQLENBQTJCLGVBQTNCLENBQWxCO0FBQ0EsUUFBSUUsU0FBUyxHQUFHTCxNQUFNLENBQUNHLG1CQUFQLENBQTJCLGNBQTNCLENBQWhCO0FBQ0EsUUFBSUcsY0FBYyxHQUFHTixNQUFNLENBQUNHLG1CQUFQLENBQTJCLGVBQTNCLENBQXJCO0FBQ0EsUUFBSUksV0FBVyxHQUFHUCxNQUFNLENBQUNHLG1CQUFQLENBQTJCLGFBQTNCLENBQWxCOztBQUVBLFFBQUksQ0FBQ1IsT0FBTCxFQUFjO0FBQ1Y7QUFDSDs7QUFFRCxRQUFJYSxPQUFPLEdBQUc7QUFDVkMsWUFBTSxFQUFFLENBQUM7QUFDTEMsWUFBSSxFQUFFLFlBREQ7QUFFTEMsWUFBSSxFQUFFLENBQUMsRUFBRCxFQUFLLEVBQUws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QkFBbUIsQ0FBQzJGLElBQXBCO0FBQ0gsQ0FGRCIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vZG9jdW1lbnRhdGlvbi9jaGFydHMvYXBleGNoYXJ0cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RHZW5lcmFsQXBleENoYXJ0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNoYXJlZCB2YXJpYWJsZXNcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGV4YW1wbGUxID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9hcGV4Y2hhcnRzXzFcIik7XHJcblxyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcbiAgICAgICAgdmFyIGxhYmVsQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1ncmF5LTUwMCcpO1xyXG4gICAgICAgIHZhciBib3JkZXJDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktMjAwJyk7XHJcbiAgICAgICAgdmFyIGJhc2VDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcclxuICAgICAgICB2YXIgc2Vjb25kYXJ5Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1ncmF5LTMwMCcpO1xyXG4gICAgICAgIHZhciBkYW5nZXJDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWRhbmdlcicpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs0NCwgNTUsIDU3LCA1NiwgNjEsIDU4LCA0MywgNTYsIDY1LCA0MSwgNTUsIDY2XVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ29zdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzIsIDM0LCA1MiwgNDYsIDI3LCA2MCwgNDEsIDQ5LCAxMywgMTEsIDQ0LCAzM11cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzc2LCA4NSwgMTAxLCA5OCwgODcsIDEwNSwgODcsIDk5LCA3NSwgODIsIDkxLCA4OV1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWyc0MCUnXSxcclxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogbGFiZWxDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogbGFiZWxDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtiYXNlQ29sb3IsIGRhbmdlckNvbG9yLCBzZWNvbmRhcnlDb2xvcl0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvcixcclxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcclxuICAgICAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBleGFtcGxlMiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfYXBleGNoYXJ0c18yXCIpO1xyXG5cclxuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xyXG4gICAgICAgIHZhciBsYWJlbENvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS01MDAnKTtcclxuICAgICAgICB2YXIgYm9yZGVyQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1ncmF5LTIwMCcpO1xyXG4gICAgICAgIHZhciBiYXNlQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy13YXJuaW5nJyk7XHJcbiAgICAgICAgdmFyIHNlY29uZGFyeUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0zMDAnKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDQsIDU1LCA1NywgNTYsIDYxLCA1OF1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzc2LCA4NSwgMTAxLCA5OCwgODcsIDEwNV1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzMwJSddLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW2Jhc2VDb2xvciwgc2Vjb25kYXJ5Q29sb3JdLFxyXG4gICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3IsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZXhhbXBsZTMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2FwZXhjaGFydHNfM1wiKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICB2YXIgbGFiZWxDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyk7XHJcbiAgICAgICAgdmFyIGJvcmRlckNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0yMDAnKTtcclxuICAgICAgICB2YXIgYmFzZUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtaW5mbycpO1xyXG4gICAgICAgIHZhciBsaWdodENvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtbGlnaHQtaW5mbycpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgNDAsIDQwLCA5MCwgOTAsIDcwLCA3MF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW2Jhc2VDb2xvcl1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJ10sXHJcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IGxhYmVsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmFzZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogbGFiZWxDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbbGlnaHRDb2xvcl0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvcixcclxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcclxuICAgICAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IGJhc2VDb2xvcixcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZXhhbXBsZTQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2FwZXhjaGFydHNfNFwiKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICB2YXIgbGFiZWxDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyk7XHJcbiAgICAgICAgdmFyIGJvcmRlckNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0yMDAnKTtcclxuXHJcbiAgICAgICAgdmFyIGJhc2VDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXN1Y2Nlc3MnKTtcclxuICAgICAgICB2YXIgYmFzZUxpZ2h0Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1saWdodC1zdWNjZXNzJyk7XHJcbiAgICAgICAgdmFyIHNlY29uZGFyeUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtd2FybmluZycpO1xyXG4gICAgICAgIHZhciBzZWNvbmRhcnlMaWdodENvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtbGlnaHQtd2FybmluZycpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs2MCwgNTAsIDgwLCA0MCwgMTAwLCA2MF1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzcwLCA2MCwgMTEwLCA0MCwgNTAsIDcwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGxhYmVsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtiYXNlQ29sb3IsIHNlY29uZGFyeUNvbG9yXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtiYXNlTGlnaHRDb2xvciwgc2Vjb25kYXJ5TGlnaHRDb2xvcl0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW2Jhc2VMaWdodENvbG9yLCBzZWNvbmRhcnlMaWdodENvbG9yXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZXhhbXBsZTUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2FwZXhjaGFydHNfNVwiKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICB2YXIgbGFiZWxDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyk7XHJcbiAgICAgICAgdmFyIGJvcmRlckNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0yMDAnKTtcclxuXHJcbiAgICAgICAgdmFyIGJhc2VDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcclxuICAgICAgICB2YXIgYmFzZUxpZ2h0Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1saWdodC1wcmltYXJ5Jyk7XHJcbiAgICAgICAgdmFyIHNlY29uZGFyeUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtaW5mbycpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs0MCwgNTAsIDY1LCA3MCwgNTAsIDMwXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICAgICAgICAgIHN0YWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMjAsIDIwLCAyNSwgMzAsIDMwLCAyMF1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0V4cGVuc2VzJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs1MCwgODAsIDYwLCA5MCwgNTAsIDcwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcclxuICAgICAgICAgICAgICAgIHN0YWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzEyJSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogbGFiZWxDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1heDogMTIwLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW2Jhc2VDb2xvciwgc2Vjb25kYXJ5Q29sb3IsIGJhc2VMaWdodENvbG9yXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBleGFtcGxlNiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfYXBleGNoYXJ0c182XCIpO1xyXG5cclxuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xyXG5cclxuICAgICAgICB2YXIgYmFzZUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtcHJpbWFyeScpO1xyXG4gICAgICAgIHZhciBiYXNlTGlnaHRDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXN1Y2Nlc3MnKTtcclxuICAgICAgICB2YXIgc2Vjb25kYXJ5Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1pbmZvJyk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0JvYicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAnRGVzaWduJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgnMjAxOS0wMy0wNScpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgnMjAxOS0wMy0wOCcpLmdldFRpbWUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAnQ29kZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMDInKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMDUnKS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogJ0NvZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTA1JykuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTA3JykuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICdUZXN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgnMjAxOS0wMy0wMycpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgnMjAxOS0wMy0wOScpLmdldFRpbWUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAnVGVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMDgnKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMTEnKS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogJ1ZhbGlkYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTExJykuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTE2JykuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICdEZXNpZ24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTAxJykuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTAzJykuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdKb2UnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogJ0Rlc2lnbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMDInKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMDUnKS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogJ1Rlc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTA2JykuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTE2JykuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICdDb2RlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgnMjAxOS0wMy0wMycpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgnMjAxOS0wMy0wNycpLmdldFRpbWUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAnRGVwbG95bWVudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMjAnKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMjInKS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogJ0Rlc2lnbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMTAnKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMTYnKS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0RhbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAnQ29kZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMTAnKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoJzIwMTktMDMtMTcnKS5nZXRUaW1lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogJ1ZhbGlkYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTA1JykuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCcyMDE5LTAzLTA5JykuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhbmdlQmFyJyxcclxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW2Jhc2VDb2xvciwgc2Vjb25kYXJ5Q29sb3IsIGJhc2VMaWdodENvbG9yXSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFySGVpZ2h0OiAnODAlJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AnLFxyXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWduOiAnbGVmdCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8gUHVibGljIEZ1bmN0aW9uc1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZXhhbXBsZTEoKTtcclxuICAgICAgICAgICAgZXhhbXBsZTIoKTtcclxuICAgICAgICAgICAgZXhhbXBsZTMoKTtcclxuICAgICAgICAgICAgZXhhbXBsZTQoKTtcclxuICAgICAgICAgICAgZXhhbXBsZTUoKTtcclxuICAgICAgICAgICAgZXhhbXBsZTYoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcclxuICAgIEtUR2VuZXJhbEFwZXhDaGFydHMuaW5pdCgpO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/apexcharts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/documentation/charts/apexcharts.js"]();
/******/ 	
/******/ })()
;